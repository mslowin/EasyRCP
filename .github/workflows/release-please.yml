name: Release Please
on:
  push:
    branches:
      - master
permissions:
  contents: write
  pull-requests: write
jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: simple
          token: ${{ secrets.PAT_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          
  build-and-upload:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}
          fetch-depth: 0
          
      - name: Configure git for UTF-8
        run: |
          git config --global core.quotepath false
          git config --global core.autocrlf false
          git config --global core.safecrlf false
        shell: pwsh
          
      - name: Check file encoding and content
        run: |
          Get-ChildItem -Path . -Filter "*.cs" -Recurse | ForEach-Object {
            Write-Host "File: $($_.FullName)"
            
            # Sprawdź kodowanie pliku
            $bytes = [System.IO.File]::ReadAllBytes($_.FullName)
            if ($bytes.Length -gt 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {
              Write-Host "Encoding: UTF-8 with BOM"
            } elseif ($bytes.Length -gt 2 -and $bytes[0] -eq 0xFF -and $bytes[1] -eq 0xFE) {
              Write-Host "Encoding: UTF-16 LE"
            } else {
              Write-Host "Encoding: Unknown or ASCII"
            }
            
            # Sprawdź zawartość
            $content = Get-Content $_.FullName -Raw -Encoding UTF8
            if ($content -match '[ąćęłńóśźżĄĆĘŁŃÓŚŹŻ]') {
              Write-Host "Found Polish characters in: $($_.FullName)"
              Write-Host "Content preview: $($content.Substring(0, [Math]::Min(200, $content.Length)))"
              
              # Pokaż hex reprezentację polskich znaków
              $polishChars = [regex]::Matches($content, '[ąćęłńóśźżĄĆĘŁŃÓŚŹŻ]')
              foreach ($match in $polishChars | Select-Object -First 5) {
                $char = $match.Value
                $bytes = [System.Text.Encoding]::UTF8.GetBytes($char)
                $hex = ($bytes | ForEach-Object { $_.ToString("X2") }) -join " "
                Write-Host "Character '$char' -> Hex: $hex"
              }
            }
            Write-Host "---"
          }
        shell: pwsh

      - name: Set UTF-8 encoding and environment
        run: |
          # PowerShell encoding
          $PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          [Console]::InputEncoding = [System.Text.Encoding]::UTF8
          
          # .NET environment variables
          $env:DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = "false"
          $env:DOTNET_SYSTEM_GLOBALIZATION_USENLS = "true"
          
          # System locale settings
          $env:LANG = "en_US.UTF-8"
          $env:LC_ALL = "en_US.UTF-8"
          $env:LC_CTYPE = "en_US.UTF-8"
          
          # Windows-specific
          $env:CHCP = "65001"
          
          # Show current environment
          Write-Host "Current environment:"
          Write-Host "DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: $env:DOTNET_SYSTEM_GLOBALIZATION_INVARIANT"
          Write-Host "LANG: $env:LANG"
          Write-Host "LC_ALL: $env:LC_ALL"
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          Write-Host "Current culture: $([System.Globalization.CultureInfo]::CurrentCulture)"
          Write-Host "Current UI culture: $([System.Globalization.CultureInfo]::CurrentUICulture)"
          
          # Test encoding
          $testString = "Test polskich znaków: ąćęłńóśźż"
          Write-Host "Test string: $testString"
          $bytes = [System.Text.Encoding]::UTF8.GetBytes($testString)
          Write-Host "UTF-8 bytes: $($bytes -join ' ')"
        shell: pwsh
          
      - name: Show .NET and system info
        run: |
          Write-Host "=== .NET Information ==="
          dotnet --info
          Write-Host ""
          
          Write-Host "=== System Information ==="
          Write-Host "OS: $env:OS"
          Write-Host "Processor: $env:PROCESSOR_ARCHITECTURE"
          Write-Host "Windows version: $(Get-ComputerInfo | Select-Object -ExpandProperty WindowsVersion)"
          Write-Host ""
          
          Write-Host "=== Local environment comparison ==="
          Write-Host "What's your local environment?"
          Write-Host "- Windows version"
          Write-Host "- .NET version"
          Write-Host "- PowerShell version"
          Write-Host "- Visual Studio version"
        shell: pwsh
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          
      - name: Restore dependencies
        run: dotnet restore
        env:
          DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: false
          DOTNET_SYSTEM_GLOBALIZATION_USENLS: true
          LANG: en_US.UTF-8
          LC_ALL: en_US.UTF-8
          LC_CTYPE: en_US.UTF-8
          LANG: en_US.UTF-8
          LC_ALL: en_US.UTF-8
        
      - name: Build app (self-contained)
        run: |
          Write-Host "Building with explicit UTF-8 settings..."
          $env:LANG = "en_US.UTF-8"
          $env:LC_ALL = "en_US.UTF-8"
          dotnet publish EasyRCP.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:InvariantGlobalization=false -p:UseAppHost=true -p:PublishTrimmed=false -o publish --verbosity normal
        shell: pwsh
        env:
          DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: false
          DOTNET_SYSTEM_GLOBALIZATION_USENLS: true
        
      - name: Test published app encoding
        run: |
          Write-Host "Checking published files..."
          Get-ChildItem -Path publish -Filter "*.exe" | ForEach-Object {
            Write-Host "Published executable: $($_.FullName)"
            Write-Host "Size: $($_.Length) bytes"
          }
          
          # Sprawdź czy aplikacja w ogóle się uruchamia
          Write-Host "Testing if app runs..."
          $exePath = Get-ChildItem -Path publish -Filter "*.exe" | Select-Object -First 1
          if ($exePath) {
            Write-Host "Trying to run: $($exePath.FullName)"
            try {
              # Spróbuj uruchomić aplikację z timeoutem
              $process = Start-Process -FilePath $exePath.FullName -ArgumentList "--help" -PassThru -NoNewWindow -Wait -TimeoutSec 10
              Write-Host "App exit code: $($process.ExitCode)"
            } catch {
              Write-Host "Error running app: $($_.Exception.Message)"
            }
          }
        shell: pwsh
        
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: publish/*.exe
          tag_name: ${{ needs.release-please.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
